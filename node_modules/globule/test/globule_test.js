'use strict';

var path = require('path');

var globule = require('../lib/globule.js');

/*
  ======== A Handy Little Nodeunit Reference ========
  https://github.com/caolan/nodeunit

  Test methods:
    test.expect(numAssertions)
    test.done()
  Test assertions:
    test.ok(value, [message])
    test.equal(actual, expected, [message])
    test.notEqual(actual, expected, [message])
    test.deepEqual(actual, expected, [message])
    test.notDeepEqual(actual, expected, [message])
    test.strictEqual(actual, expected, [message])
    test.notStrictEqual(actual, expected, [message])
    test.throws(block, [error], [message])
    test.doesNotThrow(block, [error], [message])
    test.ifError(value)
*/

exports['match'] = {
  'empty set': function(test) {
    test.expect(6);
    // Should return empty set if a required argument is missing or an empty set.
    test.deepEqual(globule.match(null, 'foo.js'), [], 'should return empty set.');
    test.deepEqual(globule.match('*.js', null), [], 'should return empty set.');
    test.deepEqual(globule.match([], 'foo.js'), [], 'should return empty set.');
    test.deepEqual(globule.match('*.js', []), [], 'should return empty set.');
    test.deepEqual(globule.match(null, ['foo.js']), [], 'should return empty set.');
    test.deepEqual(globule.match(['*.js'], null), [], 'should return empty set.');
    test.done();
  },
  'basic matching': function(test) {
    test.expect(6);
    test.deepEqual(globule.match('*.js', 'foo.js'), ['foo.js'], 'should match correctly.');
    test.deepEqual(globule.match('*.js', ['foo.js']), ['foo.js'], 'should match correctly.');
    test.deepEqual(globule.match('*.js', ['foo.js', 'bar.css']), ['foo.js'], 'should match correctly.');
    test.deepEqual(globule.match(['*.js', '*.css'], 'foo.js'), ['foo.js'], 'should match correctly.');
    test.deepEqual(globule.match(['*.js', '*.css'], ['foo.js']), ['foo.js'], 'should match correctly.');
    test.deepEqual(globule.match(['*.js', '*.css'], ['foo.js', 'bar.css']), ['foo.js', 'bar.css'], 'should match correctly.');
    test.done();
  },
  'no matches': function(test) {
    test.expect(2);
    test.deepEqual(globule.match('*.js', 'foo.css'), [], 'should fail to match.');
    test.deepEqual(globule.match('*.js', ['foo.css', 'bar.css']), [], 'should fail to match.');
    test.done();
  },
  'unique': function(test) {
    test.expect(2);
    test.deepEqual(globule.match('*.js', ['foo.js', 'foo.js']), ['foo.js'], 'should return a uniqued set.');
    test.deepEqual(globule.match(['*.js', '*.*'], ['foo.js', 'foo.js']), ['foo.js'], 'should return a uniqued set.');
    test.done();
  },
  'flatten': function(test) {
    test.expect(1);
    test.deepEqual(globule.match([['*.js', '*.css'], ['*.*', '*.js']], ['foo.js', 'bar.css']),
      ['foo.js', 'bar.css'],
      'should process nested pattern arrays correctly.');
    test.done();
  },
  'exclusion': function(test) {
    test.expect(5);
    test.deepEqual(globule.match(['!*.js'], ['foo.js', 'bar.js']), [], 'solitary exclusion should match nothing');
    test.deepEqual(globule.match(['*.js', '!*.js'], ['foo.js', 'bar.js']), [], 'exclusion should cancel match');
    test.deepEqual(globule.match(['*.js', '!f*.js'], ['foo.js', 'bar.js', 'baz.js']),
      ['bar.js', 'baz.js'],
      'partial exclusion should partially cancel match');
    test.deepEqual(globule.match(['*.js', '!*.js', 'b*.js'], ['foo.js', 'bar.js', 'baz.js']),
      ['bar.js', 'baz.js'],
      'inclusion / exclusion order matters');
    test.deepEqual(globule.match(['*.js', '!f*.js', '*.js'], ['foo.js', 'bar.js', 'baz.js']),
      ['bar.js', 'baz.js', 'foo.js'],
      'inclusion / exclusion order matters');
    test.done();
  },
  'options.matchBase': function(test) {
    test.expect(2);
    test.deepEqual(globule.match('*.js', ['foo.js', 'bar', 'baz/xyz.js'], {matchBase: true}),
      ['foo.js', 'baz/xyz.js'],
      'should matchBase (minimatch) when specified.');
    test.deepEqual(globule.match('*.js', ['foo.js', 'bar', 'baz/xyz.js']),
      ['foo.js'],
      'should not matchBase (minimatch) by default.');
    test.done();
  },
};

exports['isMatch'] = {
  'basic matching': function(test) {
    test.expect(6);
    test.ok(globule.isMatch('*.js', 'foo.js'), 'should match correctly.');
    test.ok(globule.isMatch('*.js', ['foo.js']), 'should match correctly.');
    test.ok(globule.isMatch('*.js', ['foo.js', 'bar.css']), 'should match correctly.');
    test.ok(globule.isMatch(['*.js', '*.css'], 'foo.js'), 'should match correctly.');
    test.ok(globule.isMatch(['*.js', '*.css'], ['foo.js']), 'should match correctly.');
    test.ok(globule.isMatch(['*.js', '*.css'], ['foo.js', 'bar.css']), 'should match correctly.');
    test.done();
  },
  'no matches': function(test) {
    test.expect(6);
    test.ok(!globule.isMatch('*.js', 'foo.css'), 'should fail to match.');
    test.ok(!globule.isMatch('*.js', ['foo.css', 'bar.css']), 'should fail to match.');
    test.ok(!globule.isMatch(null, 'foo.css'), 'should fail to match.');
    test.ok(!globule.isMatch('*.js', null), 'should fail to match.');
    test.ok(!globule.isMatch([], 'foo.css'), 'should fail to match.');
    test.ok(!globule.isMatch('*.js', []), 'should fail to match.');
    test.done();
  },
  'options.matchBase': function(test) {
    test.expect(2);
    test.ok(globule.isMatch('*.js', ['baz/xyz.js'], {matchBase: true}), 'should matchBase (minimatch) when specified.');
    test.ok(!globule.isMatch('*.js', ['baz/xyz.js']), 'should not matchBase (minimatch) by default.');
    test.done();
  },
};

exports['find'] = {
  setUp: function(done) {
    this.cwd = process.cwd();
    process.chdir('test/fixtures/expand');
    done();
  },
  tearDown: function(done) {
    process.chdir(this.cwd);
    done();
  },
  'basic matching': function(test) {
    test.expect(5);
    test.deepEqual(globule.find('**/*.js'), ['js/bar.js', 'js/foo.js'], 'single pattern argument should match.');
    test.deepEqual(globule.find('**/*.js', '**/*.css'),
      ['js/bar.js', 'js/foo.js', 'css/baz.css', 'css/qux.css'],
      'multiple pattern arguments should match.');
    test.deepEqual(globule.find(['**/*.js', '**/*.css']),
      ['js/bar.js', 'js/foo.js', 'css/baz.css', 'css/qux.css'],
      'array of patterns should match.');
    test.deepEqual(globule.find([['**/*.js'], [['**/*.css', 'js/*.js']]]),
      ['js/bar.js', 'js/foo.js', 'css/baz.css', 'css/qux.css'],
      'array of arrays of patterns should be flattened.');
    test.deepEqual(globule.find('*.xyz'), [], 'bad pattern should fail to match.');
    test.done();
  },
  'unique': function(test) {
    test.expect(4);
    test.deepEqual(globule.find('**/*.js', 'js/*.js'),
      ['js/bar.js', 'js/foo.js'],
      'file list should be uniqed.');
    test.deepEqual(globule.find('**/*.js', '**/*.css', 'js/*.js'), ['js/bar.js', 'js/foo.js',
      'css/baz.css', 'css/qux.css'],
      'file list should be uniqed.');
    test.deepEqual(globule.find('js', 'js/'),
      ['js', 'js/'],
      'mixed non-ending-/ and ending-/ dirs will not be uniqed by default.');
    test.deepEqual(globule.find('js', 'js/', {mark: true}),
      ['js/'],
      'mixed non-ending-/ and ending-/ dirs will be uniqed when "mark" is specified.');
    test.done();
  },
  'file order': function(test) {
    test.expect(5);
    var actual = globule.find('**/*.{js,css}');
    var expected = ['css/baz.css', 'css/qux.css', 'js/bar.js', 'js/foo.js'];
    test.deepEqual(actual, expected, 'should select 4 files in this order, by default.');

    actual = globule.find('js/foo.js', 'js/bar.js', '**/*.{js,css}');
    expected = ['js/foo.js', 'js/bar.js', 'css/baz.css', 'css/qux.css'];
    test.deepEqual(actual, expected, 'specifically-specified-up-front file order should be maintained.');

    actual = globule.find('js/bar.js', 'js/foo.js', '**/*.{js,css}');
    expected = ['js/bar.js', 'js/foo.js', 'css/baz.css', 'css/qux.css'];
    test.deepEqual(actual, expected, 'specifically-specified-up-front file order should be maintained.');

    actual = globule.find('**/*.{js,css}', '!css/qux.css', 'css/qux.css');
    expected = ['css/baz.css', 'js/bar.js', 'js/foo.js', 'css/qux.css'];
    test.deepEqual(actual, expected, 'if a file is excluded and then re-added, it should be added at the end.');

    actual = globule.find('js/foo.js', '**/*.{js,css}', '!css/qux.css', 'css/qux.css');
    expected = ['js/foo.js', 'css/baz.css', 'js/bar.js', 'css/qux.css'];
    test.deepEqual(actual, expected, 'should be able to combine specified-up-front and excluded/added-at-end.');
    test.done();
  },
  'exclusion': function(test) {
    test.expect(8);
    test.deepEqual(globule.find(['!js/*.js']), [], 'solitary exclusion should match nothing');
    test.deepEqual(globule.find(['js/bar.js','!js/bar.js']), [], 'exclusion should negate match');
    test.deepEqual(globule.find(['**/*.js', '!js/foo.js']),
      ['js/bar.js'],
      'should omit single file from matched set');
    test.deepEqual(globule.find(['!js/foo.js', '**/*.js']),
      ['js/bar.js', 'js/foo.js'],
      'inclusion / exclusion order matters');
    test.deepEqual(globule.find(['**/*.js', '**/*.css', '!js/bar.js', '!css/baz.css']),
      ['js/foo.js','css/qux.css'],
      'multiple exclusions should be removed from the set');
    test.deepEqual(globule.find(['**/*.js', '**/*.css', '!**/*.css']),
      ['js/bar.js', 'js/foo.js'],
      'excluded wildcards should be removed from the matched set');
    test.deepEqual(globule.find(['js/bar.js', 'js/foo.js', 'css/baz.css', 'css/qux.css', '!**/b*.*']),
      ['js/foo.js', 'css/qux.css'],
      'different pattern for exclusion should still work');
    test.deepEqual(globule.find(['js/bar.js', '!**/b*.*', 'js/foo.js', 'css/baz.css', 'css/qux.css']),
      ['js/foo.js', 'css/baz.css', 'css/qux.css'],
      'inclusion / exclusion order matters');
    test.done();
  },
  'options.mark': function(test) {
    test.expect(4);
    test.deepEqual(globule.find('**d*/**'), [
      'deep',
      'deep/deep.txt',
      'deep/deeper',
      'deep/deeper/deeper.txt',
      'deep/deeper/deepest',
      'deep/deeper/deepest/deepest.txt'], 'should match files and directories.');
    test.deepEqual(globule.find('**d*/**/'), [
      'deep/',
      'deep/deeper/',
      'deep/deeper/deepest/'], 'trailing / in pattern should match directories only, matches end in /.');
    test.deepEqual(globule.find('**d*/**', {mark: true}), [
      'deep/',
      'deep/deep.txt',
      'deep/deeper/',
      'deep/deeper/deeper.txt',
      'deep/deeper/deepest/',
      'deep/deeper/deepest/deepest.txt'], 'the minimatch "mark" option ensures directories end in /.');
    test.deepEqual(globule.find('**d*/**/', {mark: true}), [
      'deep/',
      'dee